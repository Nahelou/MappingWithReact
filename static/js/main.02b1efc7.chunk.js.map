{"version":3,"sources":["logo.svg","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","MAPBOX_ACCESS_TOKEN","initialViewState","longitude","latitude","zoom","pitch","bearing","App","state","data","token","viewState","intensity","threshold","radiusPixels","console","log","features","geometry","coordinates","layers","GeoJsonLayer","id","this","getRadius","getFillColor","onViewStateChange","viewport","WebMercatorViewport","nw","unproject","se","width","height","parameters","GL","DEPTH_TEST","BLEND","BLEND_SRC_RGB","ONE","BLEND_DST_RGB","BLEND_EQUATION","FUNC_ADD","HeatmapLayer","pickable","getPosition","d","theshold","key","controller","mapStyle","preventStyleDiffing","mapboxApiAccessToken","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,+HCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qJCLAC,EAAsB,4FAEtBC,EAAmB,CACvBC,WAAY,QACZC,SAAU,UACVC,KAAM,EACNC,MAAO,EACPC,QAAS,GAuEIC,E,YAlEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEC,KAAMA,EAClBC,MAAOV,EACPW,UAAUV,EACVW,UAAW,EACXC,UAAW,IACXC,aAAc,KAPL,E,mJAYZC,QAAQC,IAAIP,EAAKQ,SAAS,GAAGC,SAASC,a,sEAG9B,IAAD,EACDC,EAAS,CACb,IAAIC,IAAa,CACfC,GAAI,cACJb,KAAKc,KAAKf,MAAMC,KAChBe,UAAW,IACXC,aAAc,CAAC,IAAK,GAAI,KACxBC,kBAAmB,YAAkB,IAAhBf,EAAe,EAAfA,UACbgB,EAAW,IAAIC,IAAoBjB,GACnCkB,EAAKF,EAASG,UAAU,CAAC,EAAG,IAC5BC,EAAKJ,EAASG,UAAU,CAACH,EAASK,MAAOL,EAASM,SACxDlB,QAAQC,IAAI,UAAWa,EAAG,GAAI,YAAaE,EAAG,IAC9ChB,QAAQC,IAAI,SAAUe,EAAG,GAAI,SAAUF,EAAG,KAE5CK,YAAU,mBACPC,IAAGC,YAAa,GADT,cAEPD,IAAGE,OAAQ,GAFJ,cAGPF,IAAGG,cAAgBH,IAAGI,KAHf,cAIPJ,IAAGK,cAAgBL,IAAGI,KAJf,cAKPJ,IAAGM,eAAiBN,IAAGO,UALhB,KAQZ,IAAIC,IAAa,CACflC,KAAKc,KAAKf,MAAMC,KAChBa,GAAI,eACJsB,UAAU,EACVC,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAE5B,SAASC,YAAY,GAAI2B,EAAE5B,SAASC,YAAY,KACrEP,UAAUW,KAAKf,MAAMI,UACrBmC,SAASxB,KAAKf,MAAMK,UACpBC,aAAaS,KAAKf,MAAMM,gBAI5B,OACE,kBAAC,IAAD,CACEkC,IAAI,IACJ/C,iBAAkBsB,KAAKf,MAAMG,UAC7BsC,YAAY,EACZ7B,OAAQA,GAER,kBAAC,IAAD,CACE4B,IAAI,IACJE,SAAU,iCACVC,qBAAqB,EACrBC,qBAAsB7B,KAAKf,MAAME,a,GA7DzB2C,IAAMC,WChBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.02b1efc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {PureComponent} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {WebMercatorViewport} from '@deck.gl/core';\r\nimport GL from '@luma.gl/constants';\r\nimport {GeoJsonLayer} from '@deck.gl/layers';\r\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport data from './data/tweets.json';\r\n\r\n\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibmFoZWxvdSIsImEiOiJjazUxOG9yNDcwcDUyM3NtaTVzMnd5ejdrIn0.hFTRn-SVqOhufKAcRCnYLA';\r\n\r\nconst initialViewState = {\r\n  longitude: -1.549780,\r\n  latitude: 47.216241,\r\n  zoom: 5,\r\n  pitch: 0,\r\n  bearing: 0\r\n};\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { data: data,\r\n       token: MAPBOX_ACCESS_TOKEN,\r\n       viewState:initialViewState,\r\n       intensity: 5,\r\n       threshold: 0.05,\r\n       radiusPixels: 100,\r\n      };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log(data.features[0].geometry.coordinates)\r\n  }\r\n\r\n  render() {\r\n    const layers = [\r\n      new GeoJsonLayer({\r\n        id: 'point-layer',\r\n        data:this.state.data,\r\n        getRadius: 3000,\r\n        getFillColor: [240, 60, 200],\r\n        onViewStateChange: ({viewState}) => {\r\n          const viewport = new WebMercatorViewport(viewState);\r\n          const nw = viewport.unproject([0, 0]);\r\n          const se = viewport.unproject([viewport.width, viewport.height]);\r\n          console.log(\"north: \", nw[1], \", south: \", se[1]);\r\n          console.log(\"east: \", se[0], \"west: \", nw[0] );\r\n        },\r\n        parameters: {\r\n          [GL.DEPTH_TEST]: false,\r\n          [GL.BLEND]: true,\r\n          [GL.BLEND_SRC_RGB]: GL.ONE,\r\n          [GL.BLEND_DST_RGB]: GL.ONE,\r\n          [GL.BLEND_EQUATION]: GL.FUNC_ADD,\r\n        }\r\n      }),\r\n      new HeatmapLayer({\r\n        data:this.state.data,\r\n        id: 'heatmp-layer',\r\n        pickable: false,\r\n        getPosition: d => [d.geometry.coordinates[1], d.geometry.coordinates[0]],\r\n        intensity:this.state.intensity,\r\n        theshold:this.state.threshold,\r\n        radiusPixels:this.state.radiusPixels\r\n      })\r\n    ];\r\n\r\n    return (\r\n      <DeckGL\r\n        key=\"0\"\r\n        initialViewState={this.state.viewState}\r\n        controller={true}\r\n        layers={layers}\r\n      >\r\n        <StaticMap\r\n          key=\"1\"\r\n          mapStyle={'mapbox://styles/mapbox/dark-v9'}\r\n          preventStyleDiffing={true}\r\n          mapboxApiAccessToken={this.state.token} />\r\n      </DeckGL>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('map'));\r\n\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}